name: CI/CD Pipeline - TJGO Forecasting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8
    
    - name: Lint code
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test data preparation
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from data_preparation import DataPreparator
        preparator = DataPreparator('data/raw/base_consolidada_mensal_clean.csv')
        df = preparator.load_data()
        print('âœ… Data preparation test passed')
        "
    
    - name: Test model training
      run: |
        python -c "
        import sys
        sys.path.append('src')
        import pandas as pd
        from train_models import ForecastingModels
        
        # Criar dados de teste
        dates = pd.date_range('2020-01-01', periods=24, freq='MS')
        train_data = pd.DataFrame({
            'TOTAL_CASOS': range(1000, 1024),
            'TAXA_SELIC': [10.0] * 24
        }, index=dates[:24])
        
        test_data = pd.DataFrame({
            'TOTAL_CASOS': range(1024, 1028),
            'TAXA_SELIC': [10.0] * 4
        }, index=dates[24:])
        
        models = ForecastingModels(train_data, test_data)
        models.baseline_persistence()
        print('âœ… Model training test passed')
        "

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        docker build -t tjgo-forecasting:latest .
        echo "âœ… Docker image built successfully"
    
    - name: Test Docker container
      run: |
        docker run --rm tjgo-forecasting:latest python -c "print('âœ… Container test passed')"

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        echo "âœ… Deployment completed successfully"
